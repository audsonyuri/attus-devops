name: AWS CICD Pipeline Backend

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'

    - name: Build with Maven
      run: ./mvnw clean install

    - name: Run tests with Maven
      run: ./mvnw test

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Amazon ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v2
      with:
        aws-region: ${{ secrets.AWS_PROD_REGION }}
        aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.AWS_PROD_BACK_ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy-to-ecs:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Check out the code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_PROD_REGION }}

    - name: Log in to Amazon ECR
      id: ecr-login
      uses: aws-actions/amazon-ecr-login@v2
      with:
        aws-region: ${{ secrets.AWS_PROD_REGION }}
        aws-access-key-id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}

    - name: Update ECS service
      env:
        ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
        ECR_REPOSITORY: ${{ secrets.AWS_PROD_BACK_ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.sha }}
        CLUSTER_NAME: ${{ secrets.AWS_PROD_ECS_CLUSTER }}
        SERVICE_NAME: ${{ secrets.AWS_PROD_BACK_ECS_SERVICE }}
        CONTAINER_NAME: attus-backend
      run: |
        aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment --region ${{ secrets.AWS_PROD_REGION }}

    - name: Verify ECS deployment
      env:
        CLUSTER_NAME: ${{ secrets.AWS_PROD_ECS_CLUSTER }}
        SERVICE_NAME: ${{ secrets.AWS_PROD_BACK_ECS_SERVICE }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        set -e
        for i in {1..10}; do
          TASK_DEFINITION=$(aws ecs describe-services --cluster $CLUSTER_NAME --services $SERVICE_NAME --query 'services[0].taskDefinition' --output text --region ${{ secrets.AWS_PROD_REGION }})
          IMAGE=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION --query 'taskDefinition.containerDefinitions[0].image' --output text --region ${{ secrets.AWS_PROD_REGION }})
          if [[ "$IMAGE" == *"$IMAGE_TAG" ]]; then
            echo "Deployment successful: $IMAGE"
            exit 0
          else
            echo "Waiting for deployment..."
            sleep 30
          fi
        done
        echo "Deployment failed"
        exit 1
